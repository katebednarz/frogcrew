#Use this extension to get the best experience with OpenAPI in VS Code
#https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi

openapi: '3.0.3'
info:
  title: FrogCrew API
  description: This is the FrogCrew API
  termsOfService: http://swagger.io/terms/
  contact:
    name: Kate Bednarz
    email: kate.bednarz@tcu.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers: []
tags:
  - name: crew members
    description: Endpoints related to crew members
  - name: availability
    description: Endpoints related to crew member availability
  - name: game schedule
    description: Endpoints related to game schedules
  - name: crew schedule
    description: Endpoints related to crew schedules
  - name: crew list
    description: Endpoints related to crew list
  - name: misc
    description: Endpoints related to miscellaneous activities
  - name: reports
    description: Endpoints related to reports
  - name: auth
    description: Endpoints related to user authentication
paths:
  /crewMember:
    post:
      tags:
        - crew members
      summary: Add a crew member
      description: Add a new crew member and return the saved one.
      requestBody:
        required: true
        description: Crew member that needs to be added
        content:
          application/json:
            example:
              firstName: John
              lastName: Doe
              email: john.doe@example.com
              phoneNumber: '1234567890'
              password: P@ssw0rd
              role: ADMIN
              positions:
                - Director
                - Producer
      responses:
        '200':
          description: Crew member added and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Add Success
                data:
                  id: 1
                  firstName: John
                  lastName: Doe
                  email: john.doe@example.com
                  phoneNumber: '1234567890'
                  role: ADMIN
                  positions:
                    - DIRECTOR
                    - PRODUCER   
        '400':
          description: bad input parameter
          content:
            application/json:
              example:
                flag: false
                code: 400
                message: Provided arguments are invalid, see data for details.
                data:
                  firstName: "First name is required"
                  lastName: "Last name is required"
                  email: "Email is required"
                  phoneNumber: "Phone number is required"
                  role: "Role is required"
                  positions: "Positions is required"
    get:
      tags:
        - crew members
      summary: Find crew members
      description: Return a list of all crew members. (The endpoint in the backend is /users, plan to change it to /crewMembers)
      responses:
        '200':
          description: Crew member found and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Find Success
                data:
                  - userId: 1
                    fullName: John Doe
                    email: john.doe@example.com
                    phoneNumber: '1234567890'
                  - userId: 2
                    fullName: Jane Smith
                    email: Jane.Smith@example.com
                    phoneNumber: '1112223333'
                  - userId: 3
                    fullName: Bob Marley
                    email: Bob.Marley@example.com
                    phoneNumber: '1231231234'
  /crewMember/{gameId}/{position}:
    get:
      tags:
        - crew members
      summary: Find crew members by availability and position
      description: Return a list of crew member who are qualified for the position and available for the game.
      parameters:
        - in: path
          name: gameId
          description: Id of the game
          required: true
          schema:
            type: string
            example: 1
        - in: path
          name: position
          description: Position of the crew member
          required: true
          schema:
            type: string
            example: DIRECTOR
      responses:
        '200':
          description: Crew members found and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Find Crew Members Success
                data:
                  - userId: 1
                    fullName: John Doe
                  - userId: 2
                    fullName: Jane Smith
        '404':
          description: game not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Could not find game with id 1
                data: null
  /availability:
    post:
      tags:
        - availability
      summary: Add availability.
      description: Add new availability and return the saved one.
      requestBody:
        required: true
        description: Availability that needs to be added
        content:
          application/json:
            example:
              - userId: 1
                gameId: 1
                available: true
                comments: "I can work"
              - userId: 1
                gameId: 2
                available: false
                comments: "I can't work"
      responses:
        '200':
          description: Availability added and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Add Success
                data:
                  - userId: 1
                    gameId: 1
                    available: true
                    comments: "I can work"
                  - userId: 1
                    gameId: 2
                    available: false
                    comments: "I can't work"
        '400':
          description: bad input parameter
          content:
            application/json:
              example:
                flag: false
                code: 400
                message: Provided arguments are invalid, see data for details.
                data:
                  userId: "UserId is required"
                  gameId: "GameId is required"
                  available: "Available is required"
        '404':
          description: game not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Could not find game with id 1
                data: null
  /gameSchedule:
    post:
      tags:
        - game schedule
      summary: Add game schedule
      description: Add a new game schedule and return the saved one.
      requestBody:
        required: true
        description: Game schedule that needs to be added
        content:
          application/json:
            example:
              sport: Football
              season: '2024-2025'
      responses:
        '200':
          description: Game schedule added and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Add Success
                data:
                  id: 1
                  sport: Football
                  season: '2024-2025'
        '400':
          description: bad input parameter
          content:
            application/json:
              example:
                flag: false
                code: 400
                message: Provided arguments are invalid, see data for details.
                data:
                  sport: "Sport is required"
                  season: "Season is required"
  /gameSchedule/{scheduleId}:
    get:
      tags:
        - game schedule
      summary: Find game schedule by scheduleId
      description: Find a specifc game schedule and return it.
      parameters:
        - in: path
          name: scheduleId
          description: id of the game schedule to return
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Game schedule found and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Find Success
                data:
                  id: 1
                  sport: Football
                  season: '2024-2025'
        '404':
          description: schedule not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Could not find schedule with id 1
                data: null
  /gameSchedule/{scheduleId}/games:
    post:
      tags:
        - game schedule
      summary: Add game to schedule
      description: Add game to schedule and return saved one.
      parameters:
        - in: path
          name: scheduleId
          description: id of the game schedule to add game to
          required: true
          schema:
            type: string
            example: 1
      requestBody:
        required: true
        description: Game that needs to be added
        content:
          application/json:
            example:
              gameDate: "2021-10-10"
              venue: "Amon G. Carter Stadium"
              opponent: "Texas Longhorns"
              isFinalized: true
      responses:
        '200':
          description: Games added and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Add Success
                data:
                  gameId: 1
                  scheduleId: 1
                  gameDate: "2021-10-10"
                  venue: "Amon G. Carter Stadium"
                  opponent: "Texas Longhorns"
                  isFinalized: true
        '400':
          description: bad input parameter
          content:
            application/json:
              example:
                flag: false
                code: 400
                message: Provided arguments are invalid, see data for details.
                data:
                  gameDate: "Game date is required"
                  venue: "Venue is required"
                  opponent: "Opponent is required"
                  isFinalized: "Is finalized is required"
        '404':
          description: schedule not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Could not find schedule with id 1
                data: null
    get:
      tags:
        - game schedule
      summary: Find games by scheduleId
      description: Return a list of games for a specific schedule.
      parameters:
        - in: path
          name: scheduleId
          description: id of the game schedule to add game to
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Games found and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Find Success
                data:
                  - gameId: 1
                    scheduleId: 1
                    gameDate: "2021-10-10"
                    venue: "Amon G. Carter Stadium"
                    opponent: "Texas Longhorns"
                    isFinalized: true
                  - gameId: 2
                    scheduleId: 1
                    gameDate: "2021-10-17"
                    venue: "Amon G. Carter Stadium"
                    opponent: "Texas Longhorns"
                    isFinalized: true
        '404':
          description: schedule not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Could not find schedule with id 1
                data: null
  /gameSchedule/game/{gameId}:
    get:
      tags:
        - game schedule
      summary: Find game by gameId
      description: Find a specific game and return it.
      parameters:
        - in: path
          name: gameId
          description: id of the game to return
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Game found and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Find Success
                data:
                  gameId: 1
                  scheduleId: 1
                  gameDate: "2021-10-10"
                  venue: "Amon G. Carter Stadium"
                  opponent: "Texas Longhorns"
                  isFinalized: true
        '404':
          description: game not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Could not find game with id 1
                data: null
  /gameSchedule/season/{season}:
    get:
      tags:
        - game schedule
      summary: Find game schedules by season
      description: Return a list of game schedules for a specified season.
      parameters:
        - in: path
          name: season
          description: Season of the game schedule
          required: true
          schema:
            type: string
            example: '2024-2025'
      responses:
        '200':
          description: Game schedules found and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Find Success
                data:
                  - id: 1
                    sport: Football
                    season: '2024-2025'
                  - id: 2
                    sport: Basketball
                    season: '2024-2025'
        '404':
          description: schedules not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Could not find any schedules for the '2024-2025' season
                data: null
  /crewSchedule:
    post:
      tags:
        - crew schedule
      summary: Add new crew schedule
      description: add new crew schedule and return the saved one.
      requestBody:
        required: true
        description: Crew schedule that needs to be added
        content:
          application/json:
            example:
              gameId: 1
              changes:
                - action: ASSIGN
                  id: 1
                  position: DIRECTOR
                  fullName: John Doe
                - action: ASSIGN
                  id: 2
                  position: PRODUCER
                  fullName: Jane Smith
      responses:
        '200':
          description: Crew schedule added and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Add Success
                data:
                  gameId: 1
                  changes:
                    - action: ASSIGN
                      id: 1
                      position: DIRECTOR
                      fullName: John Doe
                    - action: ASSIGN
                      id: 2
                      position: PRODUCER
                      fullName: Jane Smith
        '400':
          description: bad input parameter
          content:
            application/json:
              example:
                flag: false
                code: 400
                message: Provided arguments are invalid, see data for details.
                data:
                  gameId: "GameId is required"
                  position: "Position is required"
                  fullName: "Full name is required"
                  changes: "Changes is required"
  /crewSchedule/{gameId}:
    get:
      tags:
        - crew schedule
      summary: Find crew schedule by Id
      description: Find a specific crew schedule and return it.
      parameters:
        - in: path
          name: gameId
          description: Id of the game
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Crew schedule found and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Find Success
                data:
                  gameId: 1
                  changes:
                    - action: ASSIGN
                      id: 1
                      position: DIRECTOR
                      fullName: John Doe
                    - action: ASSIGN
                      id: 2
                      position: PRODUCER
                      fullName: Jane Smith
        '404':
          description: game not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Could not find game with id 1
                data: null
    put:
      tags:
        - crew schedule
      summary: Update a crew schedule
      description: Updates an existing crew schedule and return the updated one.
      parameters:
        - in: path
          name: gameId
          description: Id of the game 
          required: true
          schema:
            type: string
            example: 1
      requestBody:
        required: true
        description: Crew schedule that needs to be updated
        content:
          application/json:
            example:
              gameId: 1
              changes:
                - action: ASSIGN
                  id: 1
                  position: DIRECTOR
                  fullName: John Doe
                - action: UNASSIGN
                  id: 2
                  position: PRODUCER
                  fullName: Jane Smith
      responses:
        '200':
          description: Crew schedule updated and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Update Success
                data:
                  gameId: 1
                  changes:
                    - action: ASSIGN
                      id: 1
                      position: DIRECTOR
                      fullName: John Doe
                    - action: UNASSIGN
                      id: 2
                      position: PRODUCER
                      fullName: Jane Smith
        '400':
          description: bad input parameter
          content:
            application/json:
              example:
                flag: false
                code: 400
                message: Provided arguments are invalid, see data for details.
                data:
                  gameId: "GameId is required"
                  position: "Position is required"
                  fullName: "Full name is required"
                  changes: "Changes is required"
        '404':
          description: game not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Could not find game with id 1
                data: null
  /crewList/{gameId}:
    get:
      tags:
        - crew list
      summary: Find a crew list by Id
      description: Find a specific crew list and return it.
      parameters:
        - in: path
          name: gameId
          description: Id of the game
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Crew list found and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Find Success
                data:
                  gameId: 1
                  gameStart: "12:00"
                  gameDate: "2021-10-10"
                  venue: "Amon G. Carter Stadium"
                  opponent: "Texas Longhorns"
                  crewedUsers:
                    - userId: 1
                      gameId: 1
                      fullName: John Doe
                      Position: DIRECTOR
                      ReportTime: "12:00"
                    - userId: 2
                      gameId: 1
                      fullName: Jane Smith
                      Position: PRODUCER
                      ReportTime: "12:00"
        '404':
          description: game not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Could not find game with id 1
                data: null
  /invite:
    post:
      tags:
        - misc
      summary: Invite Crew Member
      description: Send invite to crew members.
      requestBody:
        required: true
        description: Emails that need to be invited
        content:
          application/json:
            example:
              emails:
                - john.smith@example.com
                - jane.doe@example.com
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Invite Success
                data: 
                  - john.smith@example.com
                  - jane.doe@example.com
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs a user into the system.
      description: Use HTTP basic authentication to log in users and then return JWT Token.
      parameters:
        - name: username
          in: query
          description: The username for login
          required: true
          schema:
            type: string
            example: username
        - name: password
          in: query
          description: The password for login in (clear text)
          required: true
          schema:
            type: string
            example: password
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Login Success
                data:
                  userId: 1
                  role: ADMIN
                  token: JWT token
        '401':
          description: Bad Credentials
          content:
            application/json:
              example:
                flag: false
                code: 401
                message: username or password is incorrect
                data: null
components:
  schemas:
    AuthDTO:
      type: object
      description: AuthDTO schema
      properties:
        userId:
          type: integer
          description: Id of the user
          example: 1
        role:
          type: string
          description: Role of the user
          example: ADMIN
        token:
          type: string
          description: JWT token
          example: JWT token
    AvailabilityDTO:
      type: object
      description: AvailabilityDTO schema
      properties:
        userId:
          type: integer
          description: Id of the user
          example: 1
        gameId:
          type: integer
          description: Id of the game
          example: 1
        available:
          type: boolean
          description: Whether the user is available for the game
          example: true
        comments:
          type: string
          description: Comments about the user's availability
          example: "I can work the game"
    ChangesDTO:
      type: object
      description: ChangesDTO schema
      properties:
        action:
          type: string
          description: Action to be performed
          example: ASSIGN
        id:
          type: integer
          description: Id of the user
          example: 1
        position:
          type: string
          description: Position to be changed
          example: DIRECTOR
        fullName:
          type: string
          description: Full name of the user
          example: John Doe
    CrewedUserDTO:
      type: object
      description: CrewedUserDTO schema
      properties:
        userId:
          type: integer
          description: Id of the user
          example: 1
        gameId:
          type: integer
          description: Id of the game
          example: 1
        fullName:
          type: string
          description: Full name of the user
          example: John Doe
        Position:
          type: string
          description: Position of the user
          example: DIRECTOR
        ReportTime:
          type: string
          description: Time of the report
          example: "12:00"
    CrewListDTO:
      type: object
      description: CrewListDTO schema
      properties:
        gameId:
          type: integer
          description: Id of the game
          example: 1
        gameStart:
          type: string
          description: Start time of the game
          example: "12:00"
        gameDate:
          type: string
          description: Date of the game
          example: "2021-10-10"
        venue:
          type: string
          description: Location of the game
          example: "Amon G. Carter Stadium"
        opponent:
          type: string
          description: Opponent of the game
          example: "Texas Longhorns"
        crewedUsers:
          type: array
          items:
            $ref: '#/components/schemas/CrewedUserDTO'
    CrewScheduleDTO:
      type: object
      description: CrewScheduleDTO schema
      properties:
        gameId:
          type: integer
          description: Id of the game
          example: 1
        changes:
          type: array
          items:
            $ref: '#/components/schemas/ChangesDTO'
    EmailDTO:
      type: object
      description: EmailDTO schema
      properties:
        emails:
          type: array
          items:
            type: string
          description: List of emails
          example: 
            - john.smith@example.com
            - jane.doe@example.com
    GameDTO:
      type: object
      description: GameDTO schema
      properties:
        gameId:
          type: integer
          description: Id of the game
          example: 1
        scheduleId:
          type: integer
          description: Id of the schedule
          example: 1
        gameDate:
          type: string
          description: Date of the game
          example: "2021-10-10"
        venue:
          type: string
          description: Location of the game
          example: "Amon G. Carter Stadium"
        opponent:
          type: string
          description: Opponent of the game
          example: "Texas Longhorns"
        isFinalized:
          type: boolean
          description: Whether the game is finalized
          example: true
    GameScheduleDTO:
      type: object
      description: GameScheduleDTO schema
      properties:
        id:
          type: integer
          description: Id of the schedule
          example: 1
        sport:
          type: string
          description: Sport of the schedule
          example: Football
        season:
          type: string
          description: Season of the schedule
          example: '2024-2025'
    UserDTO:
      type: object
      description: UserDTO schema
      properties:
        id:
          type: integer
          description: Id of the user
          example: 1
        firstName:
          type: string
          description: First name of the user
          example: John
        lastName:
          type: string
          description: Last name of the user
          example: Doe
        email:
          type: string
          description: Email of the user
          example:
        phoneNumber:
          type: string
          description: Phone number of the user
          example: '1234567890'
        role:
          type: string
          description: Role of the user
          example: ADMIN
        positions:
          type: array
          items:
            type: string
          description: List of positions
          example:
            - DIRECTOR
            - PRODUCER
    UserSimpleDTO:
      type: object
      description: UserSimpleDTO schema
      properties:
        userId:
          type: integer
          description: Id of the user
          example: 1
        fullName:
          type: string
          description: Full name of the user
          example: John Doe
        email:
          type: string
          description: Email of the user
          example: john.doe@example.com
        phoneNumber:  
          type: string
          description: Phone number of the user
          example: '1234567890'
    Result:
      type: object
      description: API response schema
      properties:
        flag:
          type: boolean
          description: Success or not
          example: true
        code:
          type: integer
          description: Http status code
          example: 200
        message:
          type: string
          description: The response message
          example: Add Success
        data:
          type: object
          example: Endpoint specific data
    