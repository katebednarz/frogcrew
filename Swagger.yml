#Use this extension to get the best experience with OpenAPI in VS Code
#https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi

openapi: '3.0.3'
info:
  title: FrogCrew API
  description: This is the FrogCrew API
  termsOfService: http://swagger.io/terms/
  contact:
    name: Kate Bednarz
    email: kate.bednarz@tcu.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers: []
tags:
  - name: crew members
    description: Endpoints related to crew members
  - name: availability
    description: Endpoints related to crew member availability
  - name: game schedule
    description: Endpoints related to game schedules
  - name: crew schedule
    description: Endpoints related to crew schedules
  - name: crew list
    description: Endpoints related to crew list
  - name: misc
    description: Endpoints related to miscellaneous activities
  - name: reports
    description: Endpoints related to reports
  - name: auth
    description: Endpoints related to user authentication
paths:
  /crewMember:
    post:
      tags:
        - crew members
      summary: Add a crew member
      description: Add a new crew member and return the saved one.
      requestBody:
        required: true
        description: Crew member that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
            example:
              firstName: John
              lastName: Doe
              email: john.doe@example.com
              phoneNumber: '1234567890'
              password: P@ssw0rd
              role: ADMIN
      responses:
        '200':
          description: crew member profile successfully created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseAddSuccess'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserDTO'
                example:
                  userId: 1
                  firstName: John
                  lastName: Doe
                  email: john.doe@example.com
                  phoneNumber: '1234567890'
                  password: P@ssw0rd
                  role: ADMIN               
        '400':
          description: bad input parameter
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponseBadRequest'
                  - type: object
                    properties:
                      data: 
                        type: object
                example:
                  firstName: "First name is required"
                  lastName: "Last name is required"
                  email: "Email is required"
                  phoneNumber: "Phone number is required"
                  password: "Password is required"
                  role: "Role is required"
    get:
      tags:
        - crew members
      summary: Find crew members
      description: Returns a list of all crew members. (The endpoint in the backend is /users, plan to change it to /crewMembers)
      responses:
        '200':
          description: A list of all crew members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSimpleDTO'
              example:
                - userId: 1
                  fullName: John Doe
                  email: john.doe@example.com
                  phoneNumber: '1234567890'
                - userId: 2
                  fullName: Jane Smith
                  email: Jane.Smith@example.com
                  phoneNumber: '1112223333'
                - userId: 3
                  fullName: Bob Marley
                  email: Bob.Marley@example.com
                  phoneNumber: '1231231234'
  ##/availability:
    ##post:
  ##/gameSchedule:
    ##post:
  ##/gameSchedule/{scheduleId}:
    ##get:
    ##put:
    ##delete:
  ##/crewSchedule:
      
                        
        
components:
  schemas:
    AuthDTO:
      type: object
      description: AuthDTO schema
      properties:
        userId:
          type: integer
          description: Id of the user
        role:
          type: string
          description: Role of the user
        token:
          type: string
          description: JWT token
    AvailabilityDTO:
      type: object
      description: AvailabilityDTO schema
      properties:
        userId:
          type: integer
          description: Id of the user
        gameId:
          type: integer
          description: Id of the game
        available:
          type: boolean
          description: Whether the user is available for the game
        comments:
          type: string
          description: Comments about the user's availability
    ChangesDTO:
      type: object
      description: ChangesDTO schema
      properties:
        action:
          type: string
          description: Action to be performed
        id:
          type: integer
          description: Id of the user
        position:
          type: string
          description: Position to be changed
        fullName:
          type: string
          description: Full name of the user
    CrewedUserDTO:
      type: object
      description: CrewedUserDTO schema
      properties:
        userId:
          type: integer
          description: Id of the user
        gameId:
          type: integer
          description: Id of the game
        fullName:
          type: string
          description: Full name of the user
        Position:
          type: string
          description: Position of the user
        ReportTime:
          type: string
          description: Time of the report
    CrewListDTO:
      type: object
      description: CrewListDTO schema
      properties:
        gameId:
          type: integer
          description: Id of the game
        gameStart:
          type: string
          description: Start time of the game
        gameDate:
          type: string
          description: Date of the game
        venue:
          type: string
          description: Location of the game
        opponent:
          type: string
          description: Opponent of the game
        crewedUsers:
          type: array
          items:
            $ref: '#/components/schemas/CrewedUserDTO'
    CrewScheduleDTO:
      type: object
      description: CrewScheduleDTO schema
      properties:
        gameId:
          type: integer
          description: Id of the game
        changes:
          type: array
          items:
            $ref: '#/components/schemas/ChangesDTO'
    EmailDTO:
      type: object
      description: EmailDTO schema
      properties:
        emails:
          type: array
          items:
            type: string
          description: List of emails
    GameDTO:
      type: object
      description: GameDTO schema
      properties:
        gameId:
          type: integer
          description: Id of the game
        scheduleId:
          type: integer
          description: Id of the schedule
        gameDate:
          type: string
          description: Date of the game
        venue:
          type: string
          description: Location of the game
        opponent:
          type: string
          description: Opponent of the game
        isFinalized:
          type: boolean
          description: Whether the game is finalized
    GameScheduleDTO:
      type: object
      description: GameScheduleDTO schema
      properties:
        id:
          type: integer
          description: Id of the schedule
        sport:
          type: string
          description: Sport of the schedule
        season:
          type: string
          description: Season of the schedule
    UserDTO:
      type: object
      description: UserDTO schema
      properties:
        id:
          type: integer
          description: Id of the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email of the user
        phoneNumber:
          type: string
          description: Phone number of the user
        role:
          type: string
          description: Role of the user
        positions:
          type: array
          items:
            type: string
          description: List of positions
    UserSimpleDTO:
      type: object
      description: UserSimpleDTO schema
      properties:
        userId:
          type: integer
          description: Id of the user
        fullName:
          type: string
          description: Full name of the user
        email:
          type: string
          description: Email of the user
        phoneNumber:  
          type: string
          description: Phone number of the user
    ApiResponseAddSuccess:
      type: object
      description: Success response schema
      properties:
        flag:
          type: boolean
          description: Success or not
          example: true
        code:
          type: integer
          description: Http status code
          example: 200
        message:
          type: string
          description: The long success message
          example: Add Success
        data:
          type: object
          description: Endpoint specific success details
    ApiResponseBadRequest:
      type: object
      description: Bad request response schema
      properties:
        flag:
          type: boolean
          description: Success or not
          example: false
        code:
          type: integer
          description: Http status code
          example: 400
        message:
          type: string
          description: The long error message
          example: Provided arguments are invalid, see data for details.
        data:
          type : object
          description: Endpoint specific error details
    